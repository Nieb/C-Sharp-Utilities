
namespace TEST;
internal static partial class Program {
    static void Test__Vector() {
        PRINT("\n[Utility.VEC]");

        //======================================================================================================================================================
        RESULT("abs()", true
            &&    abs(-2) == 2    &&    abs(new vec2(-2)) == new vec2(2)    &&    abs(new vec3(-2)) == new vec3(2)    &&    abs(new vec4(-2)) == new vec4(2)
            &&    abs(-1) == 1    &&    abs(new vec2(-1)) == new vec2(1)    &&    abs(new vec3(-1)) == new vec3(1)    &&    abs(new vec4(-1)) == new vec4(1)
            &&    abs( 0) == 0    &&    abs(new vec2( 0)) == new vec2(0)    &&    abs(new vec3( 0)) == new vec3(0)    &&    abs(new vec4( 0)) == new vec4(0)
            &&    abs( 1) == 1    &&    abs(new vec2( 1)) == new vec2(1)    &&    abs(new vec3( 1)) == new vec3(1)    &&    abs(new vec4( 1)) == new vec4(1)
            &&    abs( 2) == 2    &&    abs(new vec2( 2)) == new vec2(2)    &&    abs(new vec3( 2)) == new vec3(2)    &&    abs(new vec4( 2)) == new vec4(2)
        );

        //======================================================================================================================================================
        PRINT("");
        RESULT("avg()", true
            &&    avg(0, 1      ) == 0.5f    &&    avg(new vec2(0), new vec2(1)                          ) == new vec2(0.5f)    &&    avg(new vec3(0), new vec3(1)                          ) == new vec3(0.5f)
            &&    avg(0, 1, 2   ) == 1.0f    &&    avg(new vec2(0), new vec2(1), new vec2(2)             ) == new vec2(1.0f)    &&    avg(new vec3(0), new vec3(1), new vec3(2)             ) == new vec3(1.0f)
            &&    avg(0, 1, 2, 3) == 1.5f    &&    avg(new vec2(0), new vec2(1), new vec2(2), new vec2(3)) == new vec2(1.5f)    &&    avg(new vec3(0), new vec3(1), new vec3(2), new vec3(3)) == new vec3(1.5f)
        );

        //======================================================================================================================================================
        PRINT("");
        RESULT("clamp()", true
            && clamp(-3, -1, 1) == -1
            && clamp(-2, -1, 1) == -1
            && clamp(-1, -1, 1) == -1
            && clamp( 0, -1, 1) ==  0
            && clamp( 1, -1, 1) ==  1
            && clamp( 2, -1, 1) ==  1
            && clamp( 3, -1, 1) ==  1
        );

        RESULT("wrap()", true
            && wrap(-8, 0, 4) == 0
            && wrap(-7, 0, 4) == 1
            && wrap(-6, 0, 4) == 2
            && wrap(-5, 0, 4) == 3
            && wrap(-4, 0, 4) == 0
            && wrap(-3, 0, 4) == 1
            && wrap(-2, 0, 4) == 2
            && wrap(-1, 0, 4) == 3
            && wrap( 0, 0, 4) == 0
            && wrap( 1, 0, 4) == 1
            && wrap( 2, 0, 4) == 2
            && wrap( 3, 0, 4) == 3
            && wrap( 4, 0, 4) == 0
            && wrap( 5, 0, 4) == 1
            && wrap( 6, 0, 4) == 2
            && wrap( 7, 0, 4) == 3
            && wrap( 8, 0, 4) == 0
        );

        //======================================================================================================================================================
        PRINT("");
        RESULT("min()", true
            && min(-2,  2) == -2
            && min(-1,  1) == -1
            && min(-1, -1) == -1
            && min( 0,  0) ==  0
            && min( 1,  1) ==  1
            && min( 1, -1) == -1
            && min( 2, -2) == -2
        );

        RESULT("max()", true
            && max(-2,  2) ==  2
            && max(-1,  1) ==  1
            && max(-1, -1) == -1
            && max( 0,  0) ==  0
            && max( 1,  1) ==  1
            && max( 1, -1) ==  1
            && max( 2, -2) ==  2
        );

        //======================================================================================================================================================
    }
}

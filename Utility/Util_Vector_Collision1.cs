
#if false
namespace Utility;
public static partial class VEC {
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //
    //      Proper range-check that works for both Integer & Float values.
    //      This principle applies to all collision/threshold testing......
    //
    //                       (P >= Min)          (P < Max)
    //                        ▼                   ▼
    //                        ●───────────────────
    //              ┼─────────┼─────────┼─────────┼─────────┼
    //             -2        -1         0         1         2
    //
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    public static bool PointVsRange(float Point_Pos,
                                    float Range_Pos, float Range_Len) => (      // Length must be positive.
            Point_Pos >= Range_Pos
        &&  Point_Pos <  Range_Pos+Range_Len
    );

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    public static bool RangeVsRange(float Range1_Pos, float Range1_Len,
                                    float Range2_Pos, float Range2_Len) => (    // Length must be positive.
            Range1_Pos < Range2_Pos+Range2_Len
        &&  Range2_Pos < Range1_Pos+Range1_Len
    );

    //##########################################################################################################################################################
    //##########################################################################################################################################################
}
#endif

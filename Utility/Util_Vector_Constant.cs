

namespace Utility;
internal static partial class VEC {
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    internal const float FLOAT_NaN      = System.Single.NaN;

    internal const float FLOAT_NEG_INF  = System.Single.NegativeInfinity;
    internal const float FLOAT_MIN      = System.Single.MinValue;
    internal const float FLOAT_NEG_ZERO = System.Single.NegativeZero;
    internal const float FLOAT_MAX      = System.Single.MaxValue;
    internal const float FLOAT_INF      = System.Single.PositiveInfinity;

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    internal const float EPSILON  = 0.000001f;
    internal const float EPSILISH = 0.0001f;

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    internal const float ONETHIRD  =  0.33333333333333333333333333333333333333333333333333f;      //  1/3
    internal const float TWOTHIRD  =  0.66666666666666666666666666666666666666666666666666f;      //  2/3

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    internal const float TO_DEG    = 57.29577951308232087679815481410517033240547246656432f;      //  (180/pi)
    internal const float TO_RAD    =  0.01745329251994329576923690768488612713442871888542f;      //  (pi/180)

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    internal const float SQRT2     =  1.41421356237309504880168872420969807856967187537695f;
    internal const float SQRT2_RCP =  0.70710678118654752440084436210484903928483593768847f;      //  1 / sqrt(2)

    internal const float SQRT3     =  1.73205080756887729352744634150587236694280525381038f;
    internal const float SQRT3_RCP =  0.57735026918962576450914878050195745564760175127013f;      //  1 / sqrt(3)

  //internal const float TWO_SQRT2 =  0.58578643762690495119831127579030192143032812462305f;      //  2 - sqrt(2)
  //internal const float TWO_SQRT3 =  0.26794919243112270647255365849412763305719474618962f;      //  2 - sqrt(3)

    //==========================================================================================================================================================
    internal const float PIQ       =  0.78539816339744830961566084581987572104929234984378f;      //  pi / 4   (Radians ==  45 Degrees)
    internal const float PIH       =  1.57079632679489661923132169163975144209858469968755f;      //  pi / 2   (Radians ==  90 Degrees)
    internal const float PI        =  3.14159265358979323846264338327950288419716939937511f;      //  pi       (Radians == 180 Degrees)
    internal const float PI1H      =  4.71238898038468985769396507491925432629575409906266f;      //  pi * 1.5 (Radians == 270 Degrees)
    internal const float PI2       =  6.28318530717958647692528676655900576839433879875021f;      //  pi * 2   (Radians == 360 Degrees)  SurfaceArea of Unit-HemiSphere.  (2pi * r * h)
    internal const float TAU       =  6.28318530717958647692528676655900576839433879875021f;      //
    internal const float PI3       =  9.42477796076937971538793014983850865259150819812532f;      //  pi * 3   (Radians == 540 Degrees)
    internal const float PI4       = 12.56637061435917295385057353311801153678867759750042f;      //  pi * 4   (Radians == 720 Degrees)  SurfaceArea of Unit-Sphere.      (4pi * r^2)

    internal const float PI_RCP    =  0.31830988618379067153776752674502872406891929148091f;      //  1 /  pi
    internal const float PI2_RCP   =  0.15915494309189533576888376337251436203445964574046f;      //  1 / 2pi
    internal const float PI3_RCP   =  0.10610329539459689051258917558167624135630643049364f;      //  1 / 3pi
    internal const float PI4_RCP   =  0.07957747154594766788444188168625718101722982287023f;      //  1 / 4pi

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    internal const float E         =  2.71828182845904523536028747135266249775724709369996f;      //  Euler's number.

    internal const float NATLOG2   =  0.69314718055994530941723212145817656807550013436026f;      //  ln(2)
    internal const float NATLOG10  =  2.30258509299404568401799145468436420760110148862877f;      //  ln(10)

                                                                                                //  2^x  <--Inverse-->  log(2, 2^x)
                                                                                                //  x^2  <--Inverse-->  sqrt(x^2)

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    internal const float PHI         =   1.61803398874989484820458683436563811772030917980576f;   //  (1+sqrt(5)) / 2                     Golden Ratio.
    internal const float PHI_RCP     =   0.61803398874989484820458683436563811772030917980576f;   //   1 / PHI

    internal const float PI2_PHI     =   3.88322207745093315469373125992539191526933978769210f;   //  2pi / PHI

    internal const float PHI_RAD     =   2.39996322972865332223155550663361385312499901105812f;   //   pi * (3-sqrt(5))                   Golden Angle.
    internal const float PHI_DEG     = 137.50776405003785464634873962837027762068869526992537f;   //  180 * (3-sqrt(5))

    //##########################################################################################################################################################
    //##########################################################################################################################################################
  //internal const float Gamma     =   0.57721566490153286060651209008240243104215933593992f;     //  Euler-Mascheroni constant.
  //internal const float G         =   0.91596559417721901505460351493238411077414937428167f;     //  Catalan's constant.

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    internal static readonly vec2 ZERO2 = new vec2(0f, 0f);
    internal static readonly vec2 ONE2  = new vec2(1f, 1f);

    internal static readonly vec2 AXIS2_X = new vec2(1f, 0f);
    internal static readonly vec2 AXIS2_Y = new vec2(0f, 1f);

    internal static readonly vec2 AXIS2_XY = new vec2(SQRT2_RCP, SQRT2_RCP);

    //==========================================================================================================================================================
    internal static readonly vec3 ZERO3 = new vec3(0f, 0f, 0f);
    internal static readonly vec3 ONE3  = new vec3(1f, 1f, 1f);

    internal static readonly vec3 AXIS3_X = new vec3(1f, 0f, 0f);
    internal static readonly vec3 AXIS3_Y = new vec3(0f, 1f, 0f);
    internal static readonly vec3 AXIS3_Z = new vec3(0f, 0f, 1f);

    internal static readonly vec3 AXIS3_XY = new vec3(SQRT2_RCP, SQRT2_RCP,        0f);
    internal static readonly vec3 AXIS3_YZ = new vec3(       0f, SQRT2_RCP, SQRT2_RCP);
    internal static readonly vec3 AXIS3_XZ = new vec3(SQRT2_RCP,        0f, SQRT2_RCP);

    internal static readonly vec3 AXIS3_XYZ = new vec3(SQRT3_RCP, SQRT3_RCP, SQRT3_RCP);

    //==========================================================================================================================================================
    internal static readonly vec4 ZERO4 = new vec4(0f, 0f, 0f, 0f);
    internal static readonly vec4 ONE4  = new vec4(1f, 1f, 1f, 1f);

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //##########################################################################################################################################################
    //##########################################################################################################################################################
}

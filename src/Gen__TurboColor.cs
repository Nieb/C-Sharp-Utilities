

using System;
using static System.Math;



namespace TEST;
internal static partial class Program {
    //##########################################################################################################################################################
    //##########################################################################################################################################################
#if false
    static void Gen__TurboColor() {
        const int N = 16; // Number of terms
        const int M = 1000; // Sample points
        double[] c = new double[N];

        // Fit the red channel of TurboColormap as example
        Func<double, double> f = TurboLUT_Red;

        for (int k = 0; k < N; k++) {
            double sum = 0;
            for (int i = 0; i < M; i++) {
                double x = Cos(PI * (i + 0.5) / M); // Chebyshev nodes on [-1,1]
                double fx = f((x + 1.0) * 0.5); // remap to [0,1]
                sum += fx * Cos(k * Acos(x));
            }
            c[k] = (2.0 / M) * sum;
            if (k == 0) c[k] /= 2.0;
        }

        // Output GLSL-formatted function using Clenshaw's recurrence
        Console.WriteLine("float TurboRedChebyshev(float x) {");
        Console.WriteLine("    x = clamp(x, 0.0, 1.0) * 2.0 - 1.0;"); // remap to [-1, 1]
        Console.WriteLine("    float b0 = 0.0, b1 = 0.0, b2 = 0.0;");
        for (int k = N - 1; k >= 1; k--)
            Console.WriteLine($"    b2 = b1; b1 = b0; b0 = {c[k]:G17} + 2.0 * x * b1 - b2;");
        Console.WriteLine($"    return {c[0]:G17} + x * b0 - b1;");
        Console.WriteLine("}");
    }
#endif

    //##########################################################################################################################################################
    //##########################################################################################################################################################
    static void Gen__TurboColor() {
        double[] TurboLUT_Red = [
            0.18995,0.19483,0.19956,0.20415,0.20860,0.21291,0.21708,0.22111,
            0.22500,0.22875,0.23236,0.23582,0.23915,0.24234,0.24539,0.24830,
            0.25107,0.25369,0.25618,0.25853,0.26074,0.26280,0.26473,0.26652,
            0.26816,0.26967,0.27103,0.27226,0.27334,0.27429,0.27509,0.27576,
            0.27628,0.27667,0.27691,0.27701,0.27698,0.27680,0.27648,0.27603,
            0.27543,0.27469,0.27381,0.27273,0.27106,0.26878,0.26592,0.26252,
            0.25862,0.25425,0.24946,0.24427,0.23874,0.23288,0.22676,0.22039,
            0.21382,0.20708,0.20021,0.19326,0.18625,0.17923,0.17223,0.16529,

            0.15844,0.15173,0.14519,0.13886,0.13278,0.12698,0.12151,0.11639,
            0.11167,0.10738,0.10357,0.10026,0.09750,0.09532,0.09377,0.09287,
            0.09267,0.09320,0.09451,0.09662,0.09958,0.10342,0.10815,0.11374,
            0.12014,0.12733,0.13526,0.14391,0.15323,0.16319,0.17377,0.18491,
            0.19659,0.20877,0.22142,0.23449,0.24797,0.26180,0.27597,0.29042,
            0.30513,0.32006,0.33517,0.35043,0.36581,0.38127,0.39678,0.41229,
            0.42778,0.44321,0.45854,0.47375,0.48879,0.50362,0.51822,0.53255,
            0.54658,0.56026,0.57357,0.58646,0.59891,0.61088,0.62233,0.63323,

            0.64362,0.65394,0.66428,0.67462,0.68494,0.69525,0.70553,0.71577,
            0.72596,0.73610,0.74617,0.75617,0.76608,0.77591,0.78563,0.79524,
            0.80473,0.81410,0.82333,0.83241,0.84133,0.85010,0.85868,0.86709,
            0.87530,0.88331,0.89112,0.89870,0.90605,0.91317,0.92004,0.92666,
            0.93301,0.93909,0.94489,0.95039,0.95560,0.96049,0.96507,0.96931,
            0.97323,0.97679,0.98000,0.98289,0.98549,0.98781,0.98986,0.99163,
            0.99314,0.99438,0.99535,0.99607,0.99654,0.99675,0.99672,0.99644,
            0.99593,0.99517,0.99419,0.99297,0.99153,0.98987,0.98799,0.98590,

            0.98360,0.98108,0.97837,0.97545,0.97234,0.96904,0.96555,0.96187,
            0.95801,0.95398,0.94977,0.94538,0.94084,0.93612,0.93125,0.92623,
            0.92105,0.91572,0.91024,0.90463,0.89888,0.89298,0.88691,0.88066,
            0.87422,0.86760,0.86079,0.85380,0.84662,0.83926,0.83172,0.82399,
            0.81608,0.80799,0.79971,0.79125,0.78260,0.77377,0.76476,0.75556,
            0.74617,0.73661,0.72686,0.71692,0.70680,0.69650,0.68602,0.67535,
            0.66449,0.65345,0.64223,0.63082,0.61923,0.60746,0.59550,0.58336,
            0.57103,0.55852,0.54583,0.53295,0.51989,0.50664,0.49321,0.47960
        ];
        double[] TurboLUT_Grn = [
            0.07176,0.08339,0.09498,0.10652,0.11802,0.12947,0.14087,0.15223,
            0.16354,0.17481,0.18603,0.19720,0.20833,0.21941,0.23044,0.24143,
            0.25237,0.26327,0.27412,0.28492,0.29568,0.30639,0.31706,0.32768,
            0.33825,0.34878,0.35926,0.36970,0.38008,0.39043,0.40072,0.41097,
            0.42118,0.43134,0.44145,0.45152,0.46153,0.47151,0.48144,0.49132,
            0.50115,0.51094,0.52069,0.53040,0.54015,0.54995,0.55979,0.56967,
            0.57958,0.58950,0.59943,0.60937,0.61931,0.62923,0.63913,0.64901,
            0.65886,0.66866,0.67842,0.68812,0.69775,0.70732,0.71680,0.72620,

            0.73551,0.74472,0.75381,0.76279,0.77165,0.78037,0.78896,0.79740,
            0.80569,0.81381,0.82177,0.82955,0.83714,0.84455,0.85175,0.85875,
            0.86554,0.87211,0.87844,0.88454,0.89040,0.89600,0.90142,0.90673,
            0.91193,0.91701,0.92197,0.92680,0.93151,0.93609,0.94053,0.94484,
            0.94901,0.95304,0.95692,0.96065,0.96423,0.96765,0.97092,0.97403,
            0.97697,0.97974,0.98234,0.98477,0.98702,0.98909,0.99098,0.99268,
            0.99419,0.99551,0.99663,0.99755,0.99828,0.99879,0.99910,0.99919,
            0.99907,0.99873,0.99817,0.99739,0.99638,0.99514,0.99366,0.99195,

            0.98999,0.98775,0.98524,0.98246,0.97941,0.97610,0.97255,0.96875,
            0.96470,0.96043,0.95593,0.95121,0.94627,0.94113,0.93579,0.93025,
            0.92452,0.91861,0.91253,0.90627,0.89986,0.89328,0.88655,0.87968,
            0.87267,0.86553,0.85826,0.85087,0.84337,0.83576,0.82806,0.82025,
            0.81236,0.80439,0.79634,0.78823,0.78005,0.77181,0.76352,0.75519,
            0.74682,0.73842,0.73000,0.72140,0.71250,0.70330,0.69382,0.68408,
            0.67408,0.66386,0.65341,0.64277,0.63193,0.62093,0.60977,0.59846,
            0.58703,0.57549,0.56386,0.55214,0.54036,0.52854,0.51667,0.50479,

            0.49291,0.48104,0.46920,0.45740,0.44565,0.43399,0.42241,0.41093,
            0.39958,0.38836,0.37729,0.36638,0.35566,0.34513,0.33482,0.32473,
            0.31489,0.30530,0.29599,0.28696,0.27824,0.26981,0.26152,0.25334,
            0.24526,0.23730,0.22945,0.22170,0.21407,0.20654,0.19912,0.19182,
            0.18462,0.17753,0.17055,0.16368,0.15693,0.15028,0.14374,0.13731,
            0.13098,0.12477,0.11867,0.11268,0.10680,0.10102,0.09536,0.08980,
            0.08436,0.07902,0.07380,0.06868,0.06367,0.05878,0.05399,0.04931,
            0.04474,0.04028,0.03593,0.03169,0.02756,0.02354,0.01963,0.01583
        ];
        double[] TurboLUT_Blu = [
            0.23217,0.26149,0.29024,0.31844,0.34607,0.37314,0.39964,0.42558,
            0.45096,0.47578,0.50004,0.52373,0.54686,0.56942,0.59142,0.61286,
            0.63374,0.65406,0.67381,0.69300,0.71162,0.72968,0.74718,0.76412,
            0.78050,0.79631,0.81156,0.82624,0.84037,0.85393,0.86692,0.87936,
            0.89123,0.90254,0.91328,0.92347,0.93309,0.94214,0.95064,0.95857,
            0.96594,0.97275,0.97899,0.98461,0.98930,0.99303,0.99583,0.99773,
            0.99876,0.99896,0.99835,0.99697,0.99485,0.99202,0.98851,0.98436,
            0.97959,0.97423,0.96833,0.96190,0.95498,0.94761,0.93981,0.93161,

            0.92305,0.91416,0.90496,0.89550,0.88580,0.87590,0.86581,0.85559,
            0.84525,0.83484,0.82437,0.81389,0.80342,0.79299,0.78264,0.77240,
            0.76230,0.75237,0.74265,0.73316,0.72393,0.71500,0.70599,0.69651,
            0.68660,0.67627,0.66556,0.65448,0.64308,0.63137,0.61938,0.60713,
            0.59466,0.58199,0.56914,0.55614,0.54303,0.52981,0.51653,0.50321,
            0.48987,0.47654,0.46325,0.45002,0.43688,0.42386,0.41098,0.39826,
            0.38575,0.37345,0.36140,0.34963,0.33816,0.32701,0.31622,0.30581,
            0.29581,0.28623,0.27712,0.26849,0.26038,0.25280,0.24579,0.23937,

            0.23356,0.22835,0.22370,0.21960,0.21602,0.21294,0.21032,0.20815,
            0.20640,0.20504,0.20406,0.20343,0.20311,0.20310,0.20336,0.20386,
            0.20459,0.20552,0.20663,0.20788,0.20926,0.21074,0.21230,0.21391,
            0.21555,0.21719,0.21880,0.22038,0.22188,0.22328,0.22456,0.22570,
            0.22667,0.22744,0.22800,0.22831,0.22836,0.22811,0.22754,0.22663,
            0.22536,0.22369,0.22161,0.21918,0.21650,0.21358,0.21043,0.20706,
            0.20348,0.19971,0.19577,0.19165,0.18738,0.18297,0.17842,0.17376,
            0.16899,0.16412,0.15918,0.15417,0.14910,0.14398,0.13883,0.13367,

            0.12849,0.12332,0.11817,0.11305,0.10797,0.10294,0.09798,0.09310,
            0.08831,0.08362,0.07905,0.07461,0.07031,0.06616,0.06218,0.05837,
            0.05475,0.05134,0.04814,0.04516,0.04243,0.03993,0.03753,0.03521,
            0.03297,0.03082,0.02875,0.02677,0.02487,0.02305,0.02131,0.01966,
            0.01809,0.01660,0.01520,0.01387,0.01264,0.01148,0.01041,0.00942,
            0.00851,0.00769,0.00695,0.00629,0.00571,0.00522,0.00481,0.00449,
            0.00424,0.00408,0.00401,0.00401,0.00410,0.00427,0.00453,0.00486,
            0.00529,0.00579,0.00638,0.00705,0.00780,0.00863,0.00955,0.01055
        ];

        int Term_Count = 15;  // Chebyshev term count

        double[] Coeff_Red = ChebyshevFit(TurboLUT_Red, Term_Count);
        double[] Coeff_Grn = ChebyshevFit(TurboLUT_Grn, Term_Count);
        double[] Coeff_Blu = ChebyshevFit(TurboLUT_Blu, Term_Count);

        for (int i = Term_Count-1; i >= 1; --i) {
            Console.WriteLine($"vec3({Coeff_Red[i],20:0.00000000000000000}, {Coeff_Grn[i],20:0.00000000000000000}, {Coeff_Blu[i],20:0.00000000000000000})");
        }
        Console.WriteLine($"\nvec3({Coeff_Red[0]:0.00000000000000000}, {Coeff_Grn[0]:0.00000000000000000}, {Coeff_Blu[0]:0.00000000000000000})");
    }

    //==========================================================================================================================================================
    static double[] ChebyshevFit(double[] Sample, int Term_Count) {
        int Sample_Count = Sample.count();

        double[] Coeffs = new double[Term_Count];

        for (int iTerm = 0; iTerm < Term_Count; ++iTerm) {
            double Sum = 0;

            for (int iSmpl = 0; iSmpl < Sample_Count; ++iSmpl) {
                double  X = Cos(Math.PI * (iSmpl + 0.5) / Sample_Count);
                double fX = Sample[iSmpl];

                Sum += fX * Cos(iTerm * Acos(X));
            }

            Coeffs[iTerm] = (2.0 / Sample_Count) * Sum;

            if (iTerm == 0)
                Coeffs[iTerm] /= 2.0;
        }

        return Coeffs;
    }


    static double Ugh(double x) => x;
    static void BLARG() {
        const int Term_Count = 16;
        const int Sample_Count = 1000;
        double[] c = new double[Term_Count];
        Func<double, double> f = Ugh;

        for (int iTerm = 0; iTerm < Term_Count; ++iTerm) {
            double sum = 0;

            for (int iSmpl = 0; iSmpl < Sample_Count; ++iSmpl) {
                double x = Cos(Math.PI * (iSmpl + 0.5) / Sample_Count); // Chebyshev nodes on [-1,1]
                double fx = f((x + 1.0) * 0.5); // remap to [0,1]
                sum += fx * Cos(iTerm * Acos(x));
            }

            c[iTerm] = (2.0 / Sample_Count) * sum;

            if (iTerm == 0) c[iTerm] /= 2.0;
        }
    }








    //##########################################################################################################################################################
    //##########################################################################################################################################################
#if false
    internal static double floor_(double A) => Floor(A);
    internal static double ceil_(double A) => Ceiling(A);
    internal static double fract_(double A) => (A - Truncate(A));
    internal static double Mix_(double V, double A, double B) => A*(1.0-V) + B*V;

    //==========================================================================================================================================================
    internal static double TurboLUT_Red(double V) {
        double[] LUT = [
            0.18995f,0.19483f,0.19956f,0.20415f,0.20860f,0.21291f,0.21708f,0.22111f,
            0.22500f,0.22875f,0.23236f,0.23582f,0.23915f,0.24234f,0.24539f,0.24830f,
            0.25107f,0.25369f,0.25618f,0.25853f,0.26074f,0.26280f,0.26473f,0.26652f,
            0.26816f,0.26967f,0.27103f,0.27226f,0.27334f,0.27429f,0.27509f,0.27576f,
            0.27628f,0.27667f,0.27691f,0.27701f,0.27698f,0.27680f,0.27648f,0.27603f,
            0.27543f,0.27469f,0.27381f,0.27273f,0.27106f,0.26878f,0.26592f,0.26252f,
            0.25862f,0.25425f,0.24946f,0.24427f,0.23874f,0.23288f,0.22676f,0.22039f,
            0.21382f,0.20708f,0.20021f,0.19326f,0.18625f,0.17923f,0.17223f,0.16529f,

            0.15844f,0.15173f,0.14519f,0.13886f,0.13278f,0.12698f,0.12151f,0.11639f,
            0.11167f,0.10738f,0.10357f,0.10026f,0.09750f,0.09532f,0.09377f,0.09287f,
            0.09267f,0.09320f,0.09451f,0.09662f,0.09958f,0.10342f,0.10815f,0.11374f,
            0.12014f,0.12733f,0.13526f,0.14391f,0.15323f,0.16319f,0.17377f,0.18491f,
            0.19659f,0.20877f,0.22142f,0.23449f,0.24797f,0.26180f,0.27597f,0.29042f,
            0.30513f,0.32006f,0.33517f,0.35043f,0.36581f,0.38127f,0.39678f,0.41229f,
            0.42778f,0.44321f,0.45854f,0.47375f,0.48879f,0.50362f,0.51822f,0.53255f,
            0.54658f,0.56026f,0.57357f,0.58646f,0.59891f,0.61088f,0.62233f,0.63323f,

            0.64362f,0.65394f,0.66428f,0.67462f,0.68494f,0.69525f,0.70553f,0.71577f,
            0.72596f,0.73610f,0.74617f,0.75617f,0.76608f,0.77591f,0.78563f,0.79524f,
            0.80473f,0.81410f,0.82333f,0.83241f,0.84133f,0.85010f,0.85868f,0.86709f,
            0.87530f,0.88331f,0.89112f,0.89870f,0.90605f,0.91317f,0.92004f,0.92666f,
            0.93301f,0.93909f,0.94489f,0.95039f,0.95560f,0.96049f,0.96507f,0.96931f,
            0.97323f,0.97679f,0.98000f,0.98289f,0.98549f,0.98781f,0.98986f,0.99163f,
            0.99314f,0.99438f,0.99535f,0.99607f,0.99654f,0.99675f,0.99672f,0.99644f,
            0.99593f,0.99517f,0.99419f,0.99297f,0.99153f,0.98987f,0.98799f,0.98590f,

            0.98360f,0.98108f,0.97837f,0.97545f,0.97234f,0.96904f,0.96555f,0.96187f,
            0.95801f,0.95398f,0.94977f,0.94538f,0.94084f,0.93612f,0.93125f,0.92623f,
            0.92105f,0.91572f,0.91024f,0.90463f,0.89888f,0.89298f,0.88691f,0.88066f,
            0.87422f,0.86760f,0.86079f,0.85380f,0.84662f,0.83926f,0.83172f,0.82399f,
            0.81608f,0.80799f,0.79971f,0.79125f,0.78260f,0.77377f,0.76476f,0.75556f,
            0.74617f,0.73661f,0.72686f,0.71692f,0.70680f,0.69650f,0.68602f,0.67535f,
            0.66449f,0.65345f,0.64223f,0.63082f,0.61923f,0.60746f,0.59550f,0.58336f,
            0.57103f,0.55852f,0.54583f,0.53295f,0.51989f,0.50664f,0.49321f,0.47960f
        ];

        if      (V <= 0f) return LUT[0];
        else if (V >= 1f) return LUT[255];
        else {
            V *= (double)(LUT.Length - 1);
            int iA = (int)floor_(V);
            int iB = (int)ceil_(V);
            V = fract_(V);

            return Mix_(V, LUT[iA], LUT[iB]);
        }
    }

    internal static double TurboLUT_Grn(double V) {
        double[] LUT = [
            0.07176f,0.08339f,0.09498f,0.10652f,0.11802f,0.12947f,0.14087f,0.15223f,
            0.16354f,0.17481f,0.18603f,0.19720f,0.20833f,0.21941f,0.23044f,0.24143f,
            0.25237f,0.26327f,0.27412f,0.28492f,0.29568f,0.30639f,0.31706f,0.32768f,
            0.33825f,0.34878f,0.35926f,0.36970f,0.38008f,0.39043f,0.40072f,0.41097f,
            0.42118f,0.43134f,0.44145f,0.45152f,0.46153f,0.47151f,0.48144f,0.49132f,
            0.50115f,0.51094f,0.52069f,0.53040f,0.54015f,0.54995f,0.55979f,0.56967f,
            0.57958f,0.58950f,0.59943f,0.60937f,0.61931f,0.62923f,0.63913f,0.64901f,
            0.65886f,0.66866f,0.67842f,0.68812f,0.69775f,0.70732f,0.71680f,0.72620f,

            0.73551f,0.74472f,0.75381f,0.76279f,0.77165f,0.78037f,0.78896f,0.79740f,
            0.80569f,0.81381f,0.82177f,0.82955f,0.83714f,0.84455f,0.85175f,0.85875f,
            0.86554f,0.87211f,0.87844f,0.88454f,0.89040f,0.89600f,0.90142f,0.90673f,
            0.91193f,0.91701f,0.92197f,0.92680f,0.93151f,0.93609f,0.94053f,0.94484f,
            0.94901f,0.95304f,0.95692f,0.96065f,0.96423f,0.96765f,0.97092f,0.97403f,
            0.97697f,0.97974f,0.98234f,0.98477f,0.98702f,0.98909f,0.99098f,0.99268f,
            0.99419f,0.99551f,0.99663f,0.99755f,0.99828f,0.99879f,0.99910f,0.99919f,
            0.99907f,0.99873f,0.99817f,0.99739f,0.99638f,0.99514f,0.99366f,0.99195f,

            0.98999f,0.98775f,0.98524f,0.98246f,0.97941f,0.97610f,0.97255f,0.96875f,
            0.96470f,0.96043f,0.95593f,0.95121f,0.94627f,0.94113f,0.93579f,0.93025f,
            0.92452f,0.91861f,0.91253f,0.90627f,0.89986f,0.89328f,0.88655f,0.87968f,
            0.87267f,0.86553f,0.85826f,0.85087f,0.84337f,0.83576f,0.82806f,0.82025f,
            0.81236f,0.80439f,0.79634f,0.78823f,0.78005f,0.77181f,0.76352f,0.75519f,
            0.74682f,0.73842f,0.73000f,0.72140f,0.71250f,0.70330f,0.69382f,0.68408f,
            0.67408f,0.66386f,0.65341f,0.64277f,0.63193f,0.62093f,0.60977f,0.59846f,
            0.58703f,0.57549f,0.56386f,0.55214f,0.54036f,0.52854f,0.51667f,0.50479f,

            0.49291f,0.48104f,0.46920f,0.45740f,0.44565f,0.43399f,0.42241f,0.41093f,
            0.39958f,0.38836f,0.37729f,0.36638f,0.35566f,0.34513f,0.33482f,0.32473f,
            0.31489f,0.30530f,0.29599f,0.28696f,0.27824f,0.26981f,0.26152f,0.25334f,
            0.24526f,0.23730f,0.22945f,0.22170f,0.21407f,0.20654f,0.19912f,0.19182f,
            0.18462f,0.17753f,0.17055f,0.16368f,0.15693f,0.15028f,0.14374f,0.13731f,
            0.13098f,0.12477f,0.11867f,0.11268f,0.10680f,0.10102f,0.09536f,0.08980f,
            0.08436f,0.07902f,0.07380f,0.06868f,0.06367f,0.05878f,0.05399f,0.04931f,
            0.04474f,0.04028f,0.03593f,0.03169f,0.02756f,0.02354f,0.01963f,0.01583f
        ];

        if      (V <= 0f) return LUT[0];
        else if (V >= 1f) return LUT[255];
        else {
            V *= (double)(LUT.Length - 1);
            int iA = (int)floor_(V);
            int iB = (int)ceil_(V);
            V = fract_(V);

            return Mix_(V, LUT[iA], LUT[iB]);
        }
    }

    internal static double TurboLUT_Blu(double V) {
        double[] LUT = [
            0.23217f,0.26149f,0.29024f,0.31844f,0.34607f,0.37314f,0.39964f,0.42558f,
            0.45096f,0.47578f,0.50004f,0.52373f,0.54686f,0.56942f,0.59142f,0.61286f,
            0.63374f,0.65406f,0.67381f,0.69300f,0.71162f,0.72968f,0.74718f,0.76412f,
            0.78050f,0.79631f,0.81156f,0.82624f,0.84037f,0.85393f,0.86692f,0.87936f,
            0.89123f,0.90254f,0.91328f,0.92347f,0.93309f,0.94214f,0.95064f,0.95857f,
            0.96594f,0.97275f,0.97899f,0.98461f,0.98930f,0.99303f,0.99583f,0.99773f,
            0.99876f,0.99896f,0.99835f,0.99697f,0.99485f,0.99202f,0.98851f,0.98436f,
            0.97959f,0.97423f,0.96833f,0.96190f,0.95498f,0.94761f,0.93981f,0.93161f,

            0.92305f,0.91416f,0.90496f,0.89550f,0.88580f,0.87590f,0.86581f,0.85559f,
            0.84525f,0.83484f,0.82437f,0.81389f,0.80342f,0.79299f,0.78264f,0.77240f,
            0.76230f,0.75237f,0.74265f,0.73316f,0.72393f,0.71500f,0.70599f,0.69651f,
            0.68660f,0.67627f,0.66556f,0.65448f,0.64308f,0.63137f,0.61938f,0.60713f,
            0.59466f,0.58199f,0.56914f,0.55614f,0.54303f,0.52981f,0.51653f,0.50321f,
            0.48987f,0.47654f,0.46325f,0.45002f,0.43688f,0.42386f,0.41098f,0.39826f,
            0.38575f,0.37345f,0.36140f,0.34963f,0.33816f,0.32701f,0.31622f,0.30581f,
            0.29581f,0.28623f,0.27712f,0.26849f,0.26038f,0.25280f,0.24579f,0.23937f,

            0.23356f,0.22835f,0.22370f,0.21960f,0.21602f,0.21294f,0.21032f,0.20815f,
            0.20640f,0.20504f,0.20406f,0.20343f,0.20311f,0.20310f,0.20336f,0.20386f,
            0.20459f,0.20552f,0.20663f,0.20788f,0.20926f,0.21074f,0.21230f,0.21391f,
            0.21555f,0.21719f,0.21880f,0.22038f,0.22188f,0.22328f,0.22456f,0.22570f,
            0.22667f,0.22744f,0.22800f,0.22831f,0.22836f,0.22811f,0.22754f,0.22663f,
            0.22536f,0.22369f,0.22161f,0.21918f,0.21650f,0.21358f,0.21043f,0.20706f,
            0.20348f,0.19971f,0.19577f,0.19165f,0.18738f,0.18297f,0.17842f,0.17376f,
            0.16899f,0.16412f,0.15918f,0.15417f,0.14910f,0.14398f,0.13883f,0.13367f,

            0.12849f,0.12332f,0.11817f,0.11305f,0.10797f,0.10294f,0.09798f,0.09310f,
            0.08831f,0.08362f,0.07905f,0.07461f,0.07031f,0.06616f,0.06218f,0.05837f,
            0.05475f,0.05134f,0.04814f,0.04516f,0.04243f,0.03993f,0.03753f,0.03521f,
            0.03297f,0.03082f,0.02875f,0.02677f,0.02487f,0.02305f,0.02131f,0.01966f,
            0.01809f,0.01660f,0.01520f,0.01387f,0.01264f,0.01148f,0.01041f,0.00942f,
            0.00851f,0.00769f,0.00695f,0.00629f,0.00571f,0.00522f,0.00481f,0.00449f,
            0.00424f,0.00408f,0.00401f,0.00401f,0.00410f,0.00427f,0.00453f,0.00486f,
            0.00529f,0.00579f,0.00638f,0.00705f,0.00780f,0.00863f,0.00955f,0.01055f
        ];

        if      (V <= 0f) return LUT[0];
        else if (V >= 1f) return LUT[255];
        else {
            V *= (double)(LUT.Length - 1);
            int iA = (int)floor_(V);
            int iB = (int)ceil_(V);
            V = fract_(V);

            return Mix_(V, LUT[iA], LUT[iB]);
        }
    }
#endif
    //##########################################################################################################################################################
    //##########################################################################################################################################################
}


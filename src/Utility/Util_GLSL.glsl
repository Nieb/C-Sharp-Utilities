//##############################################################################################################################################################
//##############################################################################################################################################################
float cbrt(float V) {
    return sign(V) * pow(abs(V), 1.0/3.0);
}

//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
float sRGB_to_Linear(float C) {return mix((C / 12.92),    pow((C + 0.055) / 1.055,      2.4 ),    step(0.04044823627710820, C));}
vec3  sRGB_to_Linear(vec3  C) {return mix((C / 12.92),    pow((C + 0.055) / 1.055, vec3(2.4)),    step(0.04044823627710820, C));}

float Linear_to_sRGB(float C) {return mix((C * 12.92),    pow(C,      1.0/2.4 )*1.055 - 0.055,    step(0.00313066844250063, C));}
vec3  Linear_to_sRGB(vec3  C) {return mix((C * 12.92),    pow(C, vec3(1.0/2.4))*1.055 - 0.055,    step(0.00313066844250063, C));}

//##############################################################################################################################################################
//##############################################################################################################################################################
float sRGB_to_Lin(float C) {return (C <= 0.04044823627710820) ? (C / 12.92) : pow((C+0.055) / 1.055, 2.4);}

vec3 sRGB_to_Lin(vec3 C) {
    return vec3(
        (C.r <= 0.04044823627710820) ? (C.r / 12.92) : pow((C.r+0.055) / 1.055, 2.4),
        (C.g <= 0.04044823627710820) ? (C.g / 12.92) : pow((C.g+0.055) / 1.055, 2.4),
        (C.b <= 0.04044823627710820) ? (C.b / 12.92) : pow((C.b+0.055) / 1.055, 2.4)
    );
}

vec4 sRGB_to_Lin(vec4 C) {
    return vec4(
        (C.r <= 0.04044823627710820) ? (C.r / 12.92) : pow((C.r+0.055) / 1.055, 2.4),
        (C.g <= 0.04044823627710820) ? (C.g / 12.92) : pow((C.g+0.055) / 1.055, 2.4),
        (C.b <= 0.04044823627710820) ? (C.b / 12.92) : pow((C.b+0.055) / 1.055, 2.4),
         C.a
    );
}

//==============================================================================================================================================================
float Lin_to_sRGB(float C) {return (C <= 0.00313066844250063) ? (C * 12.92) : pow(C, 1.0/2.4)*1.055 - 0.055;}

vec3 Lin_to_sRGB(vec3 C) {
    return vec3(
        (C.r <= 0.00313066844250063) ? (C.r * 12.92) : pow(C.r, 1.0/2.4)*1.055 - 0.055,
        (C.g <= 0.00313066844250063) ? (C.g * 12.92) : pow(C.g, 1.0/2.4)*1.055 - 0.055,
        (C.b <= 0.00313066844250063) ? (C.b * 12.92) : pow(C.b, 1.0/2.4)*1.055 - 0.055
    );
}

vec4 Lin_to_sRGB(vec4 C) {
    return vec4(
        (C.r <= 0.00313066844250063) ? (C.r * 12.92) : pow(C.r, 1.0/2.4)*1.055 - 0.055,
        (C.g <= 0.00313066844250063) ? (C.g * 12.92) : pow(C.g, 1.0/2.4)*1.055 - 0.055,
        (C.b <= 0.00313066844250063) ? (C.b * 12.92) : pow(C.b, 1.0/2.4)*1.055 - 0.055,
         C.a
    );
}

//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
float ToBrightness(vec3 C) {
    return C.r * 0.2126
         + C.g * 0.7152
         + C.b * 0.0722;
}

//##############################################################################################################################################################
//##############################################################################################################################################################
float ToLightness(vec3 C) {
    return 0.2104542553 * cbrt(0.4122214708*C.r + 0.5363325363*C.g + 0.0514459929*C.b)
         + 0.7936177850 * cbrt(0.2119034982*C.r + 0.6806995451*C.g + 0.1073969566*C.b)
         - 0.0040720468 * cbrt(0.0883024619*C.r + 0.2817188376*C.g + 0.6299787005*C.b);
}

//==============================================================================================================================================================
vec3 Lin_to_OkLab(vec3 C) {
    C = vec3(
        cbrt(0.4122214708*C.r + 0.5363325363*C.g + 0.0514459929*C.b),
        cbrt(0.2119034982*C.r + 0.6806995451*C.g + 0.1073969566*C.b),
        cbrt(0.0883024619*C.r + 0.2817188376*C.g + 0.6299787005*C.b)
    );
    return vec3(
        0.2104542553*C.x + 0.7936177850*C.y - 0.0040720468*C.z,
        1.9779984951*C.x - 2.4285922050*C.y + 0.4505937099*C.z,
        0.0259040371*C.x + 0.7827717662*C.y - 0.8086757660*C.z
    );
}

//==============================================================================================================================================================
vec3 OkLab_to_Lin(vec3 C) {
    C = vec3(
        C.x + 0.3963377774f*C.y + 0.2158037573f*C.z,
        C.x - 0.1055613458f*C.y - 0.0638541728f*C.z,
        C.x - 0.0894841775f*C.y - 1.2914855480f*C.z
    );
    C *= C * C;
    return vec3(
         4.0767416621*C.x - 3.3077115913*C.y + 0.2309699292*C.z,
        -1.2684380046*C.x + 2.6097574011*C.y - 0.3413193965*C.z,
        -0.0041960863*C.x - 0.7034186147*C.y + 1.7076147010*C.z
    );
}


//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
//##############################################################################################################################################################
vec3 TurboColorMap2(float V) {
    V = clamp(V, 0.0, 1.0);
    return vec3(
        0.13572137988692035 + x*(4.597363719627905  + x*(-42.327689751912274 + x*( 130.58871182451415 + x*(-150.56663492057857 + x*58.137453451135656)))),
        0.09140261235958302 + x*(2.1856173378635675 + x*( 4.805204796477784  + x*(-14.019450960349728 + x*(  4.210856355081685 + x*2.7747311504638876)))),
        0.10667330048674728 + x*(12.592563476453211 + x*(-60.10967551582361  + x*( 109.07449945380961 + x*( -88.50658250648611 + x*26.818260967511673))))
    );
}

//==============================================================================================================================================================
vec3 TurboColorCheb(float V) {
    V = (1.0 - clamp(V, 0.0, 1.0)) * 2.0 - 1.0;

    vec3 Result = vec3(V);
    vec3 b0 = vec3(0.0);
    vec3 b1 = vec3(0.0);
    vec3 b2 = vec3(0.0);

                      b0 = vec3(-0.0055913668232287963, -0.0032584376775221212, -0.0089040879798959732) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3( 0.0032862871864029045, -0.0028623633614758715, -0.011086799238041817 ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.00683400896492861  , -0.0054660985018757735, -0.010457886710409359 ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3( 0.0023257046789643561, -0.002588933846369951 , -0.0101237492320154   ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.0069143462022168596, -0.011790750277969705 , -0.0087037050508857183) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3( 0.017178807333559715 , -0.0044496323506333941, -0.014018230318952369 ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.0090946756210694805, -0.010454012288606807 , -0.034822048751585913 ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.005163504656773777 , -0.010148439565855604 , -0.043684284918555367 ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.058701830861556996 , -0.015061224331900953 , -0.024651240231824322 ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.015126067250670221 , -0.020463755523572338 , -0.089342061729749442 ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.030442798514325173 , -0.038173853467151353 , -0.15461726118869576  ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3( 0.2219632439264316   , -0.036739870841795065 , -0.094712179267472288 ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.067493700329105732 , -0.43288174212379765  ,  0.00382502978762113  ) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.38249571214200812  ,  0.11805990351181832  ,  0.42379440920468447  ) + 2.0 * Result * b1 - b2;

    return vec3(0.54781964869471267, 0.58369277535530273, 0.40198367226730625) + Result * b0 - b1;
}



vec3 TurboColorCheb(float V) {
    V = (1.0 - clamp(V, 0.0, 1.0)) * 2.0 - 1.0;

    vec3 Result = vec3(V);
    vec3 b0 = vec3(0.0);
    vec3 b1 = vec3(0.0);
    vec3 b2 = vec3(0.0);

                      b0 = vec3(-0.00559136829396779, -0.00325843969260033, -0.00890408812966521) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3( 0.00328628875080523, -0.00286236374214789, -0.01108679986985270) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.00683400982112694, -0.00546609900013988, -0.01045788791181790) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3( 0.00232570679214821, -0.00258893628732705, -0.01012375094680730) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.00691434700160977, -0.01179075146416580, -0.00870370562542687) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3( 0.01717880637237060, -0.00444963137662514, -0.01401822977882010) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.00909467559376626, -0.01045400984825460, -0.03482204755645070) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.00516350251937861, -0.01014843786532280, -0.04368428344658650) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.05870183317899470, -0.01506122555862630, -0.02465123936972220) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.01512606749185450, -0.02046375672471250, -0.08934206108120830) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.03044279828665900, -0.03817385241554580, -0.15461726013157100) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3( 0.22196324335067000, -0.03673986893004260, -0.09471217830739310) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.06749369919556640, -0.43288174135747500,  0.00382503046739882) + 2.0 * Result * b1 - b2;
    b2 = b1; b1 = b0; b0 = vec3(-0.38249571215428100,  0.11805990169965900,  0.42379440908314700) + 2.0 * Result * b1 - b2;

    return vec3(0.54781964843750000, 0.58369277343750000, 0.40198367187500000) + Result * b0 - b1;
}
